// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repositoryexample "go-template/internal/repository/example"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// ExampleAdd provides a mock function with given fields: ctx, name
func (_m *Service) ExampleAdd(ctx context.Context, name []string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_ExampleAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExampleAdd'
type Service_ExampleAdd_Call struct {
	*mock.Call
}

// ExampleAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - name []string
func (_e *Service_Expecter) ExampleAdd(ctx interface{}, name interface{}) *Service_ExampleAdd_Call {
	return &Service_ExampleAdd_Call{Call: _e.mock.On("ExampleAdd", ctx, name)}
}

func (_c *Service_ExampleAdd_Call) Run(run func(ctx context.Context, name []string)) *Service_ExampleAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Service_ExampleAdd_Call) Return(_a0 error) *Service_ExampleAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_ExampleAdd_Call) RunAndReturn(run func(context.Context, []string) error) *Service_ExampleAdd_Call {
	_c.Call.Return(run)
	return _c
}

// ExampleGet provides a mock function with given fields: ctx
func (_m *Service) ExampleGet(ctx context.Context) ([]*repositoryexample.Example, error) {
	ret := _m.Called(ctx)

	var r0 []*repositoryexample.Example
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*repositoryexample.Example, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*repositoryexample.Example); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repositoryexample.Example)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ExampleGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExampleGet'
type Service_ExampleGet_Call struct {
	*mock.Call
}

// ExampleGet is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) ExampleGet(ctx interface{}) *Service_ExampleGet_Call {
	return &Service_ExampleGet_Call{Call: _e.mock.On("ExampleGet", ctx)}
}

func (_c *Service_ExampleGet_Call) Run(run func(ctx context.Context)) *Service_ExampleGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_ExampleGet_Call) Return(_a0 []*repositoryexample.Example, _a1 error) *Service_ExampleGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ExampleGet_Call) RunAndReturn(run func(context.Context) ([]*repositoryexample.Example, error)) *Service_ExampleGet_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
