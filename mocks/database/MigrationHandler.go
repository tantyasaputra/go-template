// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MigrationHandler is an autogenerated mock type for the MigrationHandler type
type MigrationHandler struct {
	mock.Mock
}

type MigrationHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MigrationHandler) EXPECT() *MigrationHandler_Expecter {
	return &MigrationHandler_Expecter{mock: &_m.Mock}
}

// Down provides a mock function with given fields:
func (_m *MigrationHandler) Down() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MigrationHandler_Down_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Down'
type MigrationHandler_Down_Call struct {
	*mock.Call
}

// Down is a helper method to define mock.On call
func (_e *MigrationHandler_Expecter) Down() *MigrationHandler_Down_Call {
	return &MigrationHandler_Down_Call{Call: _e.mock.On("Down")}
}

func (_c *MigrationHandler_Down_Call) Run(run func()) *MigrationHandler_Down_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MigrationHandler_Down_Call) Return(_a0 error) *MigrationHandler_Down_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MigrationHandler_Down_Call) RunAndReturn(run func() error) *MigrationHandler_Down_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *MigrationHandler) Reset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MigrationHandler_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MigrationHandler_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MigrationHandler_Expecter) Reset() *MigrationHandler_Reset_Call {
	return &MigrationHandler_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MigrationHandler_Reset_Call) Run(run func()) *MigrationHandler_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MigrationHandler_Reset_Call) Return(_a0 error) *MigrationHandler_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MigrationHandler_Reset_Call) RunAndReturn(run func() error) *MigrationHandler_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// SetVerbose provides a mock function with given fields: _a0
func (_m *MigrationHandler) SetVerbose(_a0 bool) {
	_m.Called(_a0)
}

// MigrationHandler_SetVerbose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVerbose'
type MigrationHandler_SetVerbose_Call struct {
	*mock.Call
}

// SetVerbose is a helper method to define mock.On call
//   - _a0 bool
func (_e *MigrationHandler_Expecter) SetVerbose(_a0 interface{}) *MigrationHandler_SetVerbose_Call {
	return &MigrationHandler_SetVerbose_Call{Call: _e.mock.On("SetVerbose", _a0)}
}

func (_c *MigrationHandler_SetVerbose_Call) Run(run func(_a0 bool)) *MigrationHandler_SetVerbose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MigrationHandler_SetVerbose_Call) Return() *MigrationHandler_SetVerbose_Call {
	_c.Call.Return()
	return _c
}

func (_c *MigrationHandler_SetVerbose_Call) RunAndReturn(run func(bool)) *MigrationHandler_SetVerbose_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *MigrationHandler) Status() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MigrationHandler_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MigrationHandler_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MigrationHandler_Expecter) Status() *MigrationHandler_Status_Call {
	return &MigrationHandler_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MigrationHandler_Status_Call) Run(run func()) *MigrationHandler_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MigrationHandler_Status_Call) Return(_a0 error) *MigrationHandler_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MigrationHandler_Status_Call) RunAndReturn(run func() error) *MigrationHandler_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Up provides a mock function with given fields:
func (_m *MigrationHandler) Up() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MigrationHandler_Up_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Up'
type MigrationHandler_Up_Call struct {
	*mock.Call
}

// Up is a helper method to define mock.On call
func (_e *MigrationHandler_Expecter) Up() *MigrationHandler_Up_Call {
	return &MigrationHandler_Up_Call{Call: _e.mock.On("Up")}
}

func (_c *MigrationHandler_Up_Call) Run(run func()) *MigrationHandler_Up_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MigrationHandler_Up_Call) Return(_a0 error) *MigrationHandler_Up_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MigrationHandler_Up_Call) RunAndReturn(run func() error) *MigrationHandler_Up_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *MigrationHandler) Version() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MigrationHandler_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MigrationHandler_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MigrationHandler_Expecter) Version() *MigrationHandler_Version_Call {
	return &MigrationHandler_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MigrationHandler_Version_Call) Run(run func()) *MigrationHandler_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MigrationHandler_Version_Call) Return(_a0 error) *MigrationHandler_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MigrationHandler_Version_Call) RunAndReturn(run func() error) *MigrationHandler_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewMigrationHandler creates a new instance of MigrationHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMigrationHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MigrationHandler {
	mock := &MigrationHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
