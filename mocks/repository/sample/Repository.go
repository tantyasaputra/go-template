// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"
	sample "go-template/internal/repository/sample"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddRecords provides a mock function with given fields: ctx, payload
func (_m *Repository) AddRecords(ctx context.Context, payload []*sample.Sample) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*sample.Sample) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecords'
type Repository_AddRecords_Call struct {
	*mock.Call
}

// AddRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - payload []*sample.Sample
func (_e *Repository_Expecter) AddRecords(ctx interface{}, payload interface{}) *Repository_AddRecords_Call {
	return &Repository_AddRecords_Call{Call: _e.mock.On("AddRecords", ctx, payload)}
}

func (_c *Repository_AddRecords_Call) Run(run func(ctx context.Context, payload []*sample.Sample)) *Repository_AddRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*sample.Sample))
	})
	return _c
}

func (_c *Repository_AddRecords_Call) Return(_a0 error) *Repository_AddRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_AddRecords_Call) RunAndReturn(run func(context.Context, []*sample.Sample) error) *Repository_AddRecords_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecords provides a mock function with given fields: ctx, ids
func (_m *Repository) GetRecords(ctx context.Context, ids []int) ([]*sample.Sample, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*sample.Sample
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) ([]*sample.Sample, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int) []*sample.Sample); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sample.Sample)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecords'
type Repository_GetRecords_Call struct {
	*mock.Call
}

// GetRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int
func (_e *Repository_Expecter) GetRecords(ctx interface{}, ids interface{}) *Repository_GetRecords_Call {
	return &Repository_GetRecords_Call{Call: _e.mock.On("GetRecords", ctx, ids)}
}

func (_c *Repository_GetRecords_Call) Run(run func(ctx context.Context, ids []int)) *Repository_GetRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int))
	})
	return _c
}

func (_c *Repository_GetRecords_Call) Return(_a0 []*sample.Sample, _a1 error) *Repository_GetRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetRecords_Call) RunAndReturn(run func(context.Context, []int) ([]*sample.Sample, error)) *Repository_GetRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
